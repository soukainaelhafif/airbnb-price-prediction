name: test-and-publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ toLower(github.repository_owner) }}/airbnb-price-prediction

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.txt
      
# Build a tiny dummy model so src.api can import on CI
      - name: Prepare dummy model artifacts (so API can import)
        run: |
          python - <<'PY'
          import os, json, joblib, numpy as np, pandas as pd
          from sklearn.compose import ColumnTransformer
          from sklearn.pipeline import Pipeline
          from sklearn.preprocessing import OneHotEncoder
          from sklearn.linear_model import LinearRegression

          os.makedirs("models", exist_ok=True)
          features = ["room_type","neighbourhood","accommodates","bedrooms","bathrooms_num",
                      "minimum_nights","number_of_reviews","reviews_per_month","availability_365"]

          n = 20
          df = pd.DataFrame({
              "room_type": np.random.choice(["Entire home/apt","Private room"], n),
              "neighbourhood": np.random.choice(["Mitte","Kreuzberg","Wedding"], n),
              "accommodates": np.random.randint(1,5,n),
              "bedrooms": np.random.randint(1,3,n).astype(float),
              "bathrooms_num": np.random.choice([1.0,1.5], n),
              "minimum_nights": np.random.randint(1,5,n),
              "number_of_reviews": np.random.randint(0,50,n),
              "reviews_per_month": np.random.rand(n),
              "availability_365": np.random.randint(0,365,n),
          })
          y = 50 + 10*df["bedrooms"].values + 5*df["accommodates"].values
          pre = ColumnTransformer([("cat", OneHotEncoder(handle_unknown="ignore"),
                                    ["room_type","neighbourhood"])],
                                  remainder="passthrough")
          model = Pipeline([("prep", pre), ("reg", LinearRegression())]).fit(df[features], y)
          joblib.dump(model, "models/baseline.joblib")
          with open("models/baseline.joblib.meta.json","w",encoding="utf-8") as f:
              json.dump({"features": features, "metrics": None, "created": None}, f)
          PY

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q


  docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          provenance: false 
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=Airbnb Berlin | Price Prediction API
            org.opencontainers.image.licenses=MIT
